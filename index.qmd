---
title: "Data Wrangling with R"
author: "Meenakshi Kushwaha"
date: "21st July, 2022"
format: 
  revealjs:
    theme: [my_theme.scss]
    incremental: true
   
execute:
  echo: true
  cache: true
---

## Prerequsities

```{r}
library(tidyverse) # today's package
library(gapminder) # data set
```

## What is `tidyverse`

::: columns
::: {.column width="60%"}
A [**collection of R packages**]{style="color:#185596"} designed for data science. All packages share an underlying design philosophy, grammar, and data structures.
:::

::: {.column width="40%"}
-   `dplyr` for data manipulation
-   `ggplot2` for data visualizations
-   `readr` for reading data
-   `stringr` for string manipulation
:::
:::

::: footer
[Learn more](https://www.tidyverse.org/packages/)
:::

## Basics

-   Pick observations by their values `filter()`
-   Reorder the rows `arrange()`
-   Pick variables by their names `select()`
-   Create new variables with functions of existing variables `mutate()`
-   Collapse many values down to a single summary `summarise()`, used with `group_by()`

. . .

[These six functions provide the verbs for a language of data manipulation]{style="color:#D0541B"}

## About the dataset {.smaller}

::: columns
::: {.column width="25%"}
#### Gapminder dataset

Dataset of 142 countries, with values for life expectancy, GDP per capita, and population, every five years, from 1952 to 2007
:::

::: {.column width="13%"}
:::

::: {.column width="62%"}
```{r echo=FALSE}
knitr::kable(head(gapminder))
```
:::
:::

::: footer
Learn more: [Gapminder](https://www.gapminder.org/data/documentation/)
:::

## Gapminder dataset

```{r}
head(gapminder, 15)
```

## `filter()`

Keep or discard observations that satisfy certain condition

```{r}
#| echo: true
#| eval: false
gapminder %>% 
  filter(country == "India")
```

::: fragment
```{r}
#| echo: false
knitr::kable(head(filter(gapminder, country == "India")))
```
:::

## `filter()`

```{r}
#| echo: true
#| eval: false
gapminder %>% 
  filter(country == "India", year < 1975)
```

::: fragment
::: {style="font-size: 0.75em"}
```{r}
#| echo: false
knitr::kable(filter(gapminder, country == "India", year<1975))
```
:::
:::

## Quiz

::: nonincremental
How would you filter data from all asian countries that have life expectancy (`lifeExp`) of 80 or higher?

a)  gapminder %\>% filter(continent = "Asia", lifeExp\>"80")

b)  gapminder %\>% filter(continent = "Asia", lifeExp\>80)

::: {.fragment .highlight-red}
c)  gapminder %\>% filter(continent == Asia, lifeExp\>80)
:::

d)  gapminder %\>% filter(continent == "Asia", lifeExp\>80)
:::

## `filter()`{.smaller}

the `|` operator signifies "or"

```{r}
#| echo: true
#| eval: false
gapminder %>% 
  filter(country=="India" | country == "Nepal")
```

::: fragment
::: {style="font-size: 0.45em"}
```{r}
#| echo: false
knitr::kable(gapminder %>% 
  filter(country=="India" | country == "Nepal") %>% 
    head(14))
```
:::
:::

## `filter()`{.smaller}

Using `%>%` to match more than one value

```{r}
#| echo: true
#| eval: false
gapminder %>% 
  filter(year %in% c(1952,1962, 1972 ))
```

::: fragment
::: {style="font-size: 0.75em"}
```{r}
#| echo: false
knitr::kable(gapminder %>% 
  filter(year %in% c(1952,1962,1972 )) %>% 
    head(8))
```
:::
:::

## `arrange()`

Arrange rows in asending order by default

::: fragment
```{r}
#| echo: true
#| eval: false
gapminder %>% 
  filter(year %in% c(1952,1962, 1972 )) %>% 
  arrange(year)
```
:::

::: fragment
::: {style="font-size: 0.75em"}
```{r}
#| echo: false
knitr::kable(gapminder %>% 
  filter(year %in% c(1952,1962,1972 )) %>% 
    arrange(year) %>% 
    head())
```
:::
:::

## `arrange()`

Arrange rows in descening order using `desc`

::: fragment
```{r}
#| echo: true
#| eval: false
gapminder %>% 
  filter(year %in% c(1952,1962, 1972 )) %>% 
  arrange(desc(year))
```
:::

::: fragment
::: {style="font-size: 0.75em"}
```{r}
#| echo: false
knitr::kable(gapminder %>% 
  filter(year %in% c(1952,1962,1972 )) %>% 
    arrange(desc(year)) %>% 
    head())
```
:::
:::

## Quiz

::: nonincremental
Select the code to arrange population (`pop`) in descening order

a)  gapminder %\>% filter(pop)

::: {.fragment .highlight-red}
b)  gapminder %\>% arrange(desc(pop))
:::

c)  gapminder %\>% arrange(pop)

d)  gapminder %\>% arrange(year)
:::

## `select()`

Select variables or columns of interest

::: fragment
```{r}
#| echo: true
#| eval: false
gapminder %>% 
  select(country, year, pop)
```
:::

::: fragment
::: {style="font-size: 0.75em"}
```{r}
#| echo: false
knitr::kable(gapminder %>% 
  select(country, year, pop) %>% 
    head())
```
:::
:::

## `select()`

Drop variables using `-`

::: fragment
```{r}
#| echo: true
#| eval: false
gapminder %>% 
  select(-pop)
```
:::

::: fragment
::: {style="font-size: 0.75em"}
```{r}
#| echo: false
knitr::kable(gapminder %>% 
  select(-pop) %>% 
    head())
```
:::
:::

## `select()`

There are a number of helper functions you can use within select():

-   starts_with("abc"): matches names that begin with "abc"

-   ends_with("xyz"): matches names that end with "xyz"

-   contains("ijk"): matches names that contain "ijk"

-   matches("(.)\\1"): selects variables that match a regular expression

-   num_range("x", 1:3): matches x1, x2 and x3

## `mutate()`

Adds new variable at the end of your dataset

::: fragment
```{r}
#| echo: true
#| eval: false
gapminder %>% 
  select(country, pop) %>% 
  mutate(pop_mil = round(pop/1000000, 1))
  
```
:::

::: fragment
::: {style="font-size: 0.75em"}
```{r}
#| echo: false
knitr::kable(gapminder %>% 
  select(country, pop) %>% 
  mutate(pop_mil = round(pop/1000000, 1)) %>% 
    head())
```
:::
:::

## `mutate()`

Some of the ways that you can create new variables

-   Arithmetic operators: `+`, `-`, `*`, `/`, `^`
-   Modular arithmetic: `%/%` (integer division) and `%%` (remainder)
-   Logs: `log()`, `log2()`, `log10()`, etc.
-   Offsets: `lead()` and `lag()`
-   Logical comparisons: `<`, `<=`, `>`, `>=`, `!=`, and `==`
-   Ranking eg. `min_rank()`

## `mutate()`

Example

```{r}
#| echo: true
#| eval: false
gapminder %>% 
  select(country, year, pop) %>% 
  mutate(pop_rank = min_rank(pop)) %>% 
  arrange(pop_rank)
  
```

::: fragment
::: {style="font-size: 0.75em"}
```{r}
#| echo: false
knitr::kable(gapminder %>% 
  select(country, year, pop) %>% 
  mutate(pop_rank = min_rank(pop)) %>% 
  arrange(pop_rank) %>% 
    head())
```
:::
:::

## `transmute`()

If you only want to keep the new variable use `transmute()`

::: fragment
```{r}
#| echo: true
#| eval: false
gapminder %>% 
  select(country, pop) %>% 
  mutate(pop = round(pop/1000000, 1))
  
```
:::

::: fragment
::: {style="font-size: 0.75em"}
```{r}
#| echo: false
knitr::kable(gapminder %>% 
  select(country, pop) %>% 
  mutate(pop = round(pop/1000000, 1)) %>% 
    head())
```
:::
:::

## `summarise()` {.smaller}



:::: {.columns}
collapse data frame to a single summary

::: {.column width="45%"}
```{r}
gapminder %>% 
  summarise(mean_lifeExp = mean(lifeExp))
```
:::

::: {.column width="5%"}

:::


::: {.column width="50%"}
::: {.fragment}

Often used with `groupby()` to summarise by groups

```{r}
gapminder %>% 
  group_by(continent) %>% 
  summarise(mean_lifeExp = mean(lifeExp))
```
:::
:::

::::

## Useful summary functions

- `mean()`, `median()`
- `sd()`, `IQR()`
- `min()`, `max()`
- `n()`

## Counts

```{r}
gapminder %>% 
  count(continent)
```
::: {.fragment}
```{r}
gapminder %>% 
  group_by(continent) %>% 
  summarise(observations = n())
```
:::

## Using the pipe `%>%`

- simplifies your code
- improves readability

. . .

`filter(gapminder, country == "India")`

is same as

`gapminder %>% filter(country == "India")`

. . .

[Memory tip: `%>%` can be read as "and, then"]{style="color:#D0541B"}

## Resources
::: nonincremental
- R for Data Science [Chapter 5](https://r4ds.had.co.nz/transform.html#ungrouping)
 - Slides made using [Quarto](https://meghan.rbind.io/blog/quarto-slides/#quarto-resources)
::: 