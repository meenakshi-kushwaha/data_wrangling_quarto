---
title: "Data Wrangling with R"
author: "Meenakshi Kushwaha"
date: "21st July, 2022"
format: 
  revealjs:
    theme: [my_theme.scss]
    incremental: true
   
execute:
  echo: true
  cache: true
---

## Prerequsities

```{r}
library(tidyverse) # today's package
library(gapminder) # data set
```

## Recap

Common errors when reading file

-   not loading correct package
-   not attaching .csv extension
-   using wrong case
-   not using quotes `""` around file name

## Recap - `here` package

Type `here()` in your console. What do you see?

. . .

```{r}
here()
```

. . .

![](img/here.png)

## Recap - `here` package

`here` tells R where your file is

If your data is in the main directory where `here()` begins

```{r}
#| eval: false
my_data <- read_csv(here("my_file.csv"))
```

If you are data is inside a folder

```{r}
#| eval: false
my_data <- read_csv(here("data", "my_file.csv"))`
```

If you are data is deep inside a subfolder

```{r}
#| eval: false
my_data <- read_csv(here("data", "sub_folder", "my_file.csv"))
```

</br>

. . .

::: {.fragment .strike}
Why not just use `setwd()`
:::

. . .

::: {.fragment .highlight-blue}
Using `here()` makes your code more robust and shareable
:::

## Demo {style="font-size: 2em; text-align: middle, center "}

## What is `tidyverse`

::: columns
::: {.column width="60%"}
A [**collection of R packages**]{style="color:#185596"} designed for data science. All packages share an underlying design philosophy, grammar, and data structures.
:::

::: {.column width="40%"}
-   `dplyr` for data manipulation
-   `ggplot2` for data visualizations
-   `readr` for reading data
-   `stringr` for string manipulation
:::
:::

::: footer
[Learn more](https://www.tidyverse.org/packages/)
:::

## Basics

-   Pick observations by their values `filter()`
-   Reorder the rows `arrange()`
-   Pick variables by their names `select()`
-   Create new variables with functions of existing variables `mutate()`
-   Collapse many values down to a single summary `summarise()`, used with `group_by()`

. . .

[These six functions provide the verbs for a language of data manipulation]{style="color:#D0541B"}

## About the dataset {.smaller}

::: columns
::: {.column width="25%"}
#### Gapminder dataset

Dataset of 142 countries, with values for life expectancy, GDP per capita, and population, every five years, from 1952 to 2007
:::

::: {.column width="13%"}
:::

::: {.column width="62%"}
```{r echo=FALSE}
knitr::kable(head(gapminder))
```
:::
:::

::: footer
Learn more: [Gapminder](https://www.gapminder.org/data/documentation/)
:::

## Gapminder dataset

```{r}
head(gapminder, 15)
```

## 

![](img/dplyr_filter.jpeg)

## `filter()`

Keep or discard observations that satisfy certain condition

```{r}
#| echo: true
#| eval: false
gapminder %>% 
  filter(country == "India")
```

::: fragment
```{r}
#| echo: false
knitr::kable(head(filter(gapminder, country == "India")))
```
:::

## `filter()`

```{r}
#| echo: true
#| eval: false
gapminder %>% 
  filter(country == "India", year < 1975)
```

::: fragment
::: {style="font-size: 0.75em"}
```{r}
#| echo: false
knitr::kable(filter(gapminder, country == "India", year<1975))
```
:::
:::

## Using the pipe `%>%`

-   simplifies your code
-   improves readability

. . .

`filter(gapminder, country == "India")`

is same as

`gapminder %>% filter(country == "India")`

. . .

[Memory tip: `%>%` can be read as "and, then"]{style="color:#D0541B"}

. . .

*Keyboard shortcut*
Ctrl/Cmd + Shift + M

## Quiz

::: nonincremental
How would you filter data from all asian countries that have life expectancy (`lifeExp`) higher than 80?

a)  gapminder %\>% filter(continent = "Asia", lifeExp\>"80")

b)  gapminder %\>% filter(continent = "Asia", lifeExp\>80)

c)  gapminder %\>% filter(continent == Asia, lifeExp\>80)

::: {.fragment .highlight-red}
d)  gapminder %\>% filter(continent == "Asia", lifeExp\>80)
:::
:::

## `filter()`{.smaller}

the `|` operator signifies "or"

```{r}
#| echo: true
#| eval: false
gapminder %>% 
  filter(country=="India" | country == "Nepal")
```

::: fragment
::: {style="font-size: 0.45em"}
```{r}
#| echo: false
knitr::kable(gapminder %>% 
  filter(country=="India" | country == "Nepal") %>% 
    head(14))
```
:::
:::

## `filter()`{.smaller}

Using `%in%` to match more than one value

```{r}
#| echo: true
#| eval: false
gapminder %>% 
  filter(year %in% c(1952,1962, 1972 ))
```

::: fragment
::: {style="font-size: 0.75em"}
```{r}
#| echo: false
knitr::kable(gapminder %>% 
  filter(year %in% c(1952,1962,1972 )) %>% 
    head(8))
```
:::
:::

## `arrange()`

Arrange rows in asending order by default

::: fragment
```{r}
#| echo: true
#| eval: false
gapminder %>% 
  filter(year %in% c(1952,1962, 1972 )) %>% 
  arrange(year)
```
:::

::: fragment
::: {style="font-size: 0.75em"}
```{r}
#| echo: false
knitr::kable(gapminder %>% 
  filter(year %in% c(1952,1962,1972 )) %>% 
    arrange(year) %>% 
    head())
```
:::
:::

## `arrange()`

Arrange rows in descening order using `desc`

::: fragment
```{r}
#| echo: true
#| eval: false
gapminder %>% 
  filter(year %in% c(1952,1962, 1972 )) %>% 
  arrange(desc(year))
```
:::

::: fragment
::: {style="font-size: 0.75em"}
```{r}
#| echo: false
knitr::kable(gapminder %>% 
  filter(year %in% c(1952,1962,1972 )) %>% 
    arrange(desc(year)) %>% 
    head())
```
:::
:::

## Quiz

::: nonincremental
Select the code to arrange population (`pop`) in descening order

a)  gapminder %\>% filter(pop)

::: {.fragment .highlight-red}
b)  gapminder %\>% arrange(desc(pop))
:::

c)  gapminder %\>% arrange(pop)

d)  gapminder %\>% arrange(year)
:::

## `select()`

Select variables or columns of interest

::: fragment
```{r}
#| echo: true
#| eval: false
gapminder %>% 
  select(country, year, pop)
```
:::

::: fragment
::: {style="font-size: 0.75em"}
```{r}
#| echo: false
knitr::kable(gapminder %>% 
  select(country, year, pop) %>% 
    head())
```
:::
:::

## `select()`

Drop variables using `-`

::: fragment
```{r}
#| echo: true
#| eval: false
gapminder %>% 
  select(-pop)
```
:::

::: fragment
::: {style="font-size: 0.75em"}
```{r}
#| echo: false
knitr::kable(gapminder %>% 
  select(-pop) %>% 
    head())
```
:::
:::

## `select()`

There are a number of helper functions you can use within select():

-   starts_with("abc"): matches names that begin with "abc"

-   ends_with("xyz"): matches names that end with "xyz"

-   contains("ijk"): matches names that contain "ijk"

-   matches("(.)\\1"): selects variables that match a regular expression

-   num_range("x", 1:3): matches x1, x2 and x3

## 

![](img/dplyr_mutate.png)

## `mutate()`

Adds new variable at the end of your dataset

::: fragment
```{r}
#| echo: true
#| eval: false
gapminder %>% 
  select(country, pop) %>% 
  mutate(pop_mil = round(pop/1000000, 1))
  
```
:::

::: fragment
::: {style="font-size: 0.75em"}
```{r}
#| echo: false
knitr::kable(gapminder %>% 
  select(country, pop) %>% 
  mutate(pop_mil = round(pop/1000000, 1)) %>% 
    head())
```
:::
:::

## `mutate()`

Some of the ways that you can create new variables

-   Arithmetic operators: `+`, `-`, `*`, `/`, `^`
-   Modular arithmetic: `%/%` (integer division) and `%%` (remainder)
-   Logs: `log()`, `log2()`, `log10()`, etc.
-   Offsets: `lead()` and `lag()`
-   Logical comparisons: `<`, `<=`, `>`, `>=`, `!=`, and `==`
-   Ranking eg. `min_rank()`

## `mutate()`

Example

```{r}
#| echo: true
#| eval: false
gapminder %>% 
  select(country, year, pop) %>% 
  mutate(pop_rank = min_rank(pop)) %>% 
  arrange(pop_rank)
  
```

::: fragment
::: {style="font-size: 0.75em"}
```{r}
#| echo: false
knitr::kable(gapminder %>% 
  select(country, year, pop) %>% 
  mutate(pop_rank = min_rank(pop)) %>% 
  arrange(pop_rank) %>% 
    head())
```
:::
:::

## Quiz

What does the following code do?

```{r}
#| eval: false
gapminder %>% 
select(country, year, pop) %>% 
  mutate(pop_lakh = pop/100000)
```

::: {.nonincremental}
a) Remove `country`, `year` and `pop` 

b) Add new variables `country`, `year` , `pop`, and `pop_lakh` to the dataset

:::{.fragment .highlight-red}
c) select `country`, `year` and `pop` from the dataset and add a new variable `pop_lakh`
:::

d) All of the above

:::
## Using `mutate()` with a condition


Make a new variable with numeric code for each continent

```{r}
#| eval: false
gapminder %>% 
  select (country, continent, year, pop) %>% 
  mutate(cont_code = ifelse(continent == "Africa", 1, 
                            ifelse(continent == "Americas", 2,
                                   ifelse(continent == "Asia", 3,
                                          ifelse(continent == "Europe", 4, 5)))))
```

::: fragment
::: {style="font-size: 0.75em"}
```{r}
#| echo: false
knitr::kable(gapminder %>% 
  select (country, continent, year, pop) %>% 
  mutate(cont_code = ifelse(continent == "Africa", 1, 
                            ifelse(continent == "Americas", 2,
                                   ifelse(continent == "Asia", 3,
                                          ifelse(continent == "Europe", 4, 5))))) %>% 
    head())
```
:::
:::

## `case_when()`

![](img/dplyr_case_when.png)

## Using `case_when()` with `mutate()`

```{r}
#| eval: false
gapminder %>% 
  select (country, continent, year, pop) %>% 
  mutate(cont_code = case_when(continent == "Africa" ~ 1,
                               continent == "Americas" ~ 2,
                               continent == "Asia" ~ 3,
                               continent == "Europe" ~ 4,
                               TRUE ~ 5))
```

::: fragment
::: {style="font-size: 0.75em"}
```{r}
#| echo: false
knitr::kable(gapminder %>% 
  select (country, continent, year, pop) %>% 
  mutate(cont_code = case_when(continent == "Africa" ~ 1,
                               continent == "Americas" ~ 2,
                               continent == "Asia" ~ 3,
                               continent == "Europe" ~ 4,
                               TRUE ~ 5)) %>% 
    head())
```
:::
:::

## Using `case_when()` with `mutate()`

![](img/case_when.webp)

. . .

```{r}
#| eval: false
gapminder %>% 
  select (country, continent, year, pop) %>% 
  mutate(cont_code = case_when(continent == "Africa" ~ 1,
                               continent == "Americas" ~ 2,
                               continent == "Asia" ~ 3,
                               continent == "Europe" ~ 4,
                               TRUE ~ 5))
```

::: footer
[Source](https://www.sharpsightlabs.com/blog/case-when-r/)
:::

## `summarise()` {.smaller}

### collapse data frame to a single summary

::: columns
::: {.column width="45%"}
```{r}
#| eval: false
gapminder %>% 
  summarise(mean_lifeExp = mean(lifeExp))
```

```{r}
#| echo: false
knitr::kable(gapminder %>% 
  summarise(mean_lifeExp = mean(lifeExp)))
```
:::

::: {.column width="5%"}
:::

::: {.column width="50%"}
Often used with `groupby()` to summarise by groups

```{r}
#| eval: false
gapminder %>% 
  group_by(continent) %>% 
  summarise(mean_lifeExp = mean(lifeExp))
```

```{r}
#| echo: false
knitr::kable(gapminder %>% 
  group_by(continent) %>% 
  summarise(mean_lifeExp = mean(lifeExp)))
```
:::
:::

## Useful summary functions

-   `mean()`, `median()`
-   `sd()`, `IQR()`
-   `min()`, `max()`
-   `n()`

## Counts

### Count number of observations in each group

::: columns
::: {.column width="45%"}
```{r}
#| eval: false
gapminder %>% 
  count(continent)
```

```{r}
#| echo: false
knitr::kable(gapminder %>% 
  count(continent))
```
:::

::: {.column width="5%"}
:::

::: {.column width="50%"}
```{r}
#| eval: false
gapminder %>% 
  group_by(continent) %>% 
  summarise(observations = n())
```

```{r}
#| echo: false
knitr::kable(gapminder %>% 
  group_by(continent) %>% 
  summarise(observations = n()))
```
:::
:::

## Resources

::: nonincremental
-   R for Data Science [Chapter 5](https://r4ds.had.co.nz/transform.html#ungrouping)
-   Slides made using [Quarto](https://meghan.rbind.io/blog/quarto-slides/#quarto-resources)
-   Art work by [Allison Horst](https://github.com/allisonhorst/stats-illustrations)
:::
